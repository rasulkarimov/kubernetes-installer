---
# init the first master node
- name: Check if node is already part of the Kubernetes cluster
  ansible.builtin.stat:
    path: /etc/kubernetes/kubelet.conf
  register: kubelet_conf_status
  become: true
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Print kubeadm_status for debugging
  ansible.builtin.debug:
    var: kubelet_conf_status
  when: kubelet_conf_status
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

  # TODO, replace 
- name: Get the server's IP
  ansible.builtin.command: curl -s ifconfig.me
  register: server_ip
  when: not kubelet_conf_status.stat.exists
  changed_when: false
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Initialize the Kubernetes cluster with kubeadm
  ansible.builtin.command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --token-ttl 186h
    --control-plane-endpoint="{{ control_plane_endpoint.strip() }}"
    --upload-certs
  register: kubeadm_init_result
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  args:
    creates: /etc/kubernetes/admin.conf
  when: not kubelet_conf_status.stat.exists
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Print kubeadm init command result
  ansible.builtin.debug:
    msg: "{{ kubeadm_init_result }}"
  run_once: true

- name: Ensure .kube directory exists
  ansible.builtin.file:
    path: "/home/ubuntu/.kube"
    state: directory
    mode: '0755'
    owner: ubuntu
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Copy Kubernetes admin config to user's .kube directory
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/ubuntu/.kube/config"
    remote_src: yes
    mode: '0600'
    owner: ubuntu
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Copy kubeconfig file to local machine as kubeconfig.cfg
  ansible.builtin.fetch:
    src: "/home/ubuntu/.kube/config"
    dest: "./kubeconfig.cfg"
    flat: yes
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

# Post installation configuration
- name: Apply the Calico manifest using kubectl
  ansible.builtin.command:
    cmd: kubectl apply -f https://projectcalico.docs.tigera.io/manifests/calico.yaml
  become_user: ubuntu
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Download and apply NGINX ingress controller manifest
  ansible.builtin.command: >
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/baremetal/deploy.yaml
  register: apply_result
  become_user: ubuntu
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- debug:
    msg: "{{ apply_result.stdout }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Wait for ingress-nginx service to be created
  ansible.builtin.command: >
    kubectl get svc ingress-nginx-controller -n ingress-nginx
  retries: 10
  delay: 10
  register: service_status
  until: service_status.rc == 0
  become_user: ubuntu
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Patch ingress-nginx service nodePorts
  ansible.builtin.command: >
    kubectl patch svc ingress-nginx-controller -n ingress-nginx
    --type='json'
    -p '[{"op": "replace", "path": "/spec/ports/0/nodePort", "value": 31112},
          {"op": "replace", "path": "/spec/ports/1/nodePort", "value": 32462}]'
  register: service_verification
  become_user: ubuntu
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- debug:
    msg: "Service patched successfully: {{ service_verification.stdout }}"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

  # Join other master nodes
- name: Get the certificate key
  ansible.builtin.command: kubeadm init phase upload-certs --upload-certs
  register: certificate_key
  become: true
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Extract the certificate key from stdout
  ansible.builtin.set_fact:
    certificate_key_value: "{{ certificate_key.stdout | regex_search('([a-f0-9]{64})') }}"
  run_once: true

- name: Debug the certificate key
  ansible.builtin.debug:
    msg: "The extracted certificate key is: {{ certificate_key_value }}"
  run_once: true

- name: Generate the join command
  ansible.builtin.command: "kubeadm token create --print-join-command --certificate-key {{ certificate_key_value }}"
  register: join_command
  ignore_errors: true
  become: true
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check if node is already part of the Kubernetes cluster
  ansible.builtin.stat:
    path: /etc/kubernetes/kubelet.conf
  register: kubelet_conf_status
  become: true

- name: Join master nodes to the Kubernetes cluster
  ansible.builtin.command:
    cmd: "{{ join_command.stdout }}"
  when: not kubelet_conf_status.stat.exists
  register: join_status
  become: true

- name: Ensure .kube directory exists
  ansible.builtin.file:
    path: "/home/ubuntu/.kube"
    state: directory
    mode: '0755'
    owner: ubuntu

- name: Copy Kubernetes admin config to user's .kube directory
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/ubuntu/.kube/config"
    remote_src: yes
    mode: '0600'
    owner: ubuntu
