- hosts: workers
  vars:
    crio_version: v1.31
    kubernetes_version: v1.31
    pod_network_cidr: "10.244.0.0/16"
  tasks:

    - name: disable swapiness
      ansible.posix.sysctl:
        name: vm.swappiness
        value: '1'
        state: present
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"
    
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - software-properties-common
          - curl
        state: present
        update_cache: yes
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    # Add the Kubernetes repository
    - name: Ensure /etc/apt/keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        owner: root
        group: root
        mode: '0755'
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Download and store the Kubernetes GPG key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key
        dest: /tmp/kubernetes-release.key
        mode: '0644'
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Convert Kubernetes GPG key to keyring format
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Add Kubernetes repository
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /
        owner: root
        group: root
        mode: '0644'
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    # Add the CRI-O repository
    - name: Download and store the CRI-O GPG key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/addons:/cri-o:/stable:/v1.31/deb/Release.key
        dest: /tmp/cri-o-release.key
        mode: '0644'
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Convert GPG key to keyring format
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg /tmp/cri-o-release.key
      args:
        creates: /etc/apt/keyrings/cri-o-apt-keyring.gpg
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Add CRI-O repository
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/cri-o.list
        content: |
          deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ crio_version }}/deb/ /
        owner: root
        group: root
        mode: '0644'
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"
        
    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Install cri-o, kubelet, kubeadm, and kubectl
      ansible.builtin.apt:
        name:
          - cri-o
          - kubelet
          - kubeadm
          - kubectl
        state: present
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Start CRI-O service
      ansible.builtin.service:
        name: crio
        state: started
        enabled: yes
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

    - name: Ensure br_netfilter module is loaded
      community.general.modprobe:
        name: br_netfilter
        state: present
        persistent: present
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['workers'] }}"

      # Join
    - name: Generate the join command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false
      become_user: ubuntu
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Check if node is already part of the Kubernetes cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_status
      become: true

    - name: Print kubeadm_status for debugging
      ansible.builtin.debug:
        var: kubelet_conf_status

    - name: Join worker nodes to the Kubernetes cluster
      ansible.builtin.command:
        cmd: "{{ join_command.stdout }}"
      when: not kubelet_conf_status.stat.exists
      register: join_status
      become: true