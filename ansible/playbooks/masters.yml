---
- hosts: masters
  vars:
    crio_version: v1.31
    kubernetes_version: v1.31
    pod_network_cidr: "10.244.0.0/16"
  tasks:

    - name: disable swapiness
      ansible.posix.sysctl:
        name: vm.swappiness
        value: '1'
        state: present

    - ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present

    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - software-properties-common
          - curl
        state: present
        update_cache: yes

    # Add the Kubernetes repository
    - name: Ensure /etc/apt/keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        owner: root
        group: root
        mode: '0755'
    - name: Download and store the Kubernetes GPG key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key
        dest: /tmp/kubernetes-release.key
        mode: '0644'
    - name: Convert Kubernetes GPG key to keyring format
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - name: Add Kubernetes repository
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /
        owner: root
        group: root
        mode: '0644'

    # Add the CRI-O repository
    - name: Download and store the CRI-O GPG key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/addons:/cri-o:/stable:/v1.31/deb/Release.key
        dest: /tmp/cri-o-release.key
        mode: '0644'
    - name: Convert GPG key to keyring format
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg /tmp/cri-o-release.key
      args:
        creates: /etc/apt/keyrings/cri-o-apt-keyring.gpg
    - name: Add CRI-O repository
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/cri-o.list
        content: |
          deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ crio_version }}/deb/ /
        owner: root
        group: root
        mode: '0644'
        
    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes

    - name: Install cri-o, kubelet, kubeadm, and kubectl
      ansible.builtin.apt:
        name:
          - cri-o
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Start CRI-O service
      ansible.builtin.service:
        name: crio
        state: started
        enabled: yes

    - name: Ensure br_netfilter module is loaded
      community.general.modprobe:
        name: br_netfilter
        state: present
        persistent: present

    # init the first node
    - name: Check if node is already part of the Kubernetes cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_status
      become: true
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Print kubeadm_status for debugging
      ansible.builtin.debug:
        var: kubelet_conf_status
      when: kubelet_conf_status
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Get the server's public IP
      ansible.builtin.command: curl -s ifconfig.me
      register: server_ip
      when: not kubelet_conf_status.stat.exists
      changed_when: false
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Initialize the Kubernetes cluster with kubeadm
      ansible.builtin.command: >
        kubeadm init
        --pod-network-cidr={{ pod_network_cidr }}
        --token-ttl 186h
        --control-plane-endpoint={{ server_ip.stdout }}
        --upload-certs
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      args:
        creates: /etc/kubernetes/admin.conf
      when: not kubelet_conf_status.stat.exists
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Ensure .kube directory exists
      ansible.builtin.file:
        path: "/home/ubuntu/.kube"
        state: directory
        mode: '0755'
        owner: ubuntu
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Copy Kubernetes admin config to user's .kube directory
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/ubuntu/.kube/config"
        remote_src: yes
        mode: '0600'
        owner: ubuntu
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Download the Calico manifest
      ansible.builtin.get_url:
        url: https://projectcalico.docs.tigera.io/manifests/calico.yaml
        dest: /tmp/calico.yaml
        mode: '0644'
      become_user: ubuntu
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Apply the Calico manifest using kubectl
      ansible.builtin.command:
        cmd: kubectl apply -f /tmp/calico.yaml
      args:
        chdir: /tmp
      become_user: ubuntu
      delegate_to: "{{ groups['masters'][0] }}"

      # Join master nodes
    - name: Get the certificate key
      ansible.builtin.command: kubeadm init phase upload-certs --upload-certs
      register: certificate_key
      become: true
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Extract the certificate key from stdout
      ansible.builtin.set_fact:
        certificate_key_value: "{{ certificate_key.stdout | regex_search('([a-f0-9]{64})') }}"

    - name: Debug the certificate key
      ansible.builtin.debug:
        msg: "The extracted certificate key is: {{ certificate_key_value }}"

    - name: Generate the join command
      ansible.builtin.command: "kubeadm token create --print-join-command --certificate-key {{ certificate_key_value }}"
      register: join_command
      ignore_errors: true
      become: true
      delegate_to: "{{ groups['masters'][0] }}"

    - name: Check if node is already part of the Kubernetes cluster
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_status
      become: true

    - name: Join master nodes to the Kubernetes cluster
      ansible.builtin.command:
        cmd: "{{ join_command.stdout }}"
      when: not kubelet_conf_status.stat.exists
      register: join_status
      become: true

    - name: Ensure .kube directory exists
      ansible.builtin.file:
        path: "/home/ubuntu/.kube"
        state: directory
        mode: '0755'
        owner: ubuntu

    - name: Copy Kubernetes admin config to user's .kube directory
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/ubuntu/.kube/config"
        remote_src: yes
        mode: '0600'
        owner: ubuntu